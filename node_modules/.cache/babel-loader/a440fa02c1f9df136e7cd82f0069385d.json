{"ast":null,"code":"var _jsxFileName = \"/Users/Braden/Documents/Lambda_FSW/Labs (1-8)/sorting-hat-fe/src/components/Quiz.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/actions/getQuestions\";\nimport { getAnswers } from \"../redux/actions/getAnswers\";\nimport { setScores } from \"../redux/actions/setScores\";\nimport { getTracks } from \"../redux/actions/getTracks\";\nimport { Redirect } from \"react-router-dom\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Quiz(props) {\n  const {\n    getQuestions,\n    getAnswers,\n    setScores,\n    getTracks,\n    questions,\n    answers,\n    tracks\n  } = props;\n  const [num, setNum] = useState(0);\n  const [currentPoints, setCurrentPoints] = useState({\n    fullstack: 0,\n    ios: 0,\n    android: 0,\n    ux: 0,\n    ds: 0\n  });\n  useEffect(() => {\n    getQuestions();\n    getAnswers();\n    getTracks();\n  }, []);\n\n  if (num === questions.length) {\n    setScores(currentPoints);\n    return React.createElement(Redirect, {\n      to: \"/results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"quiz-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Quiz\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, questions[num].question), React.createElement(\"div\", {\n    className: \"flex flex-col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, answers.map(answer => {\n    if (answer.question_id === questions[num].id) {\n      return React.createElement(\"button\", {\n        key: answer.id,\n        onClick: () => {\n          const point = tracks.filter(track => track.answer_id === answer.id)[0];\n          setNum(num + 1);\n          setCurrentPoints({ ...currentPoints,\n            fullstack: currentPoints.fullStack + parseFloat(point.fullstack),\n            ios: currentPoints.ios + parseFloat(point.iOS),\n            android: currentPoints.android + parseFloat(point.android),\n            ux: currentPoints.ux + parseFloat(point.UX),\n            ds: currentPoints.ds + parseFloat(point.DS)\n          }); // console.log(point.fullstack);\n\n          console.log(parseFloat(point.fullstack)); // console.log(currentPoints);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }, answer.choice);\n    }\n  })), React.createElement(ProgressBar, {\n    progress: `${questions[num].id}/${questions.length}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    questions: state.questions,\n    answers: state.answers,\n    tracks: state.tracks\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getQuestions,\n  getAnswers,\n  setScores,\n  getTracks\n})(Quiz);","map":{"version":3,"sources":["/Users/Braden/Documents/Lambda_FSW/Labs (1-8)/sorting-hat-fe/src/components/Quiz.js"],"names":["React","useState","useEffect","connect","getQuestions","getAnswers","setScores","getTracks","Redirect","ProgressBar","Quiz","props","questions","answers","tracks","num","setNum","currentPoints","setCurrentPoints","fullstack","ios","android","ux","ds","length","question","map","answer","question_id","id","point","filter","track","answer_id","fullStack","parseFloat","iOS","UX","DS","console","log","choice","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/actions/getQuestions\";\nimport { getAnswers } from \"../redux/actions/getAnswers\";\nimport { setScores } from \"../redux/actions/setScores\";\nimport { getTracks } from \"../redux/actions/getTracks\";\nimport { Redirect } from \"react-router-dom\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Quiz(props) {\n  const {\n    getQuestions,\n    getAnswers,\n    setScores,\n    getTracks,\n    questions,\n    answers,\n    tracks\n  } = props;\n\n  const [num, setNum] = useState(0);\n\n  const [currentPoints, setCurrentPoints] = useState({\n    fullstack: 0,\n    ios: 0,\n    android: 0,\n    ux: 0,\n    ds: 0\n  });\n\n  useEffect(() => {\n    getQuestions();\n    getAnswers();\n    getTracks();\n  }, []);\n\n  if (num === questions.length) {\n    setScores(currentPoints);\n    return <Redirect to=\"/results\" />;\n  }\n  return (\n    <div className=\"quiz-wrapper\">\n      <h1>Quiz</h1>\n      <h2>{questions[num].question}</h2>\n\n      <div className=\"flex flex-col\">\n        {answers.map(answer => {\n          if (answer.question_id === questions[num].id) {\n            return (\n              <button\n                key={answer.id}\n                onClick={() => {\n                  const point = tracks.filter(\n                    track => track.answer_id === answer.id\n                  )[0];\n                  setNum(num + 1);\n                  setCurrentPoints({\n                    ...currentPoints,\n                    fullstack:\n                      currentPoints.fullStack + parseFloat(point.fullstack),\n                    ios: currentPoints.ios + parseFloat(point.iOS),\n                    android: currentPoints.android + parseFloat(point.android),\n                    ux: currentPoints.ux + parseFloat(point.UX),\n                    ds: currentPoints.ds + parseFloat(point.DS)\n                  });\n                  // console.log(point.fullstack);\n                  console.log(parseFloat(point.fullstack));\n\n                  // console.log(currentPoints);\n                }}\n              >\n                {answer.choice}\n              </button>\n            );\n          }\n        })}\n      </div>\n      <ProgressBar progress={`${questions[num].id}/${questions.length}`} />\n    </div>\n  );\n}\nconst mapStateToProps = state => {\n  return {\n    questions: state.questions,\n    answers: state.answers,\n    tracks: state.tracks\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getQuestions,\n  getAnswers,\n  setScores,\n  getTracks\n})(Quiz);\n"]},"metadata":{},"sourceType":"module"}