{"ast":null,"code":"import { QUESTION_GET_START, QUESTION_GET_SUCCESS, QUESTION_GET_FAIL, ANSWER_GET_START, ANSWER_GET_SUCCESS, ANSWER_GET_FAIL } from \"../constants\";\nconst initialState = {\n  isFetching: false,\n  questions: [{\n    question: \"question1\"\n  }, {\n    question: \"question2\"\n  }, {\n    question: \"question3\"\n  }],\n  answers: [{\n    choice: \"Nulla et pellentesque, facilisis pede\",\n    id: 1,\n    question_id: 1\n  }, {\n    choice: \"This is an answer to the question\",\n    id: 2,\n    question_id: 1\n  }, {\n    choice: \"Nonummy ante pulvinar\",\n    id: 3,\n    question_id: 1\n  }, {\n    choice: \"Lectus leo\",\n    id: 4,\n    question_id: 1\n  }, {\n    choice: \"This is an answer to the question\",\n    id: 5,\n    question_id: 2\n  }, {\n    choice: \"Amet hendrerit amet, diam arcu et\",\n    id: 6,\n    question_id: 2\n  }, {\n    choice: \"Cras eleifend litora, pellentesque donec mus, volutpat libero\",\n    id: 7,\n    question_id: 2\n  }, {\n    choice: \"Elit wisi, et senectus etiam\",\n    id: 8,\n    question_id: 2\n  }, {\n    choice: \"Dolorem possimus, quis ante\",\n    id: 9,\n    question_id: 3\n  }, {\n    choice: \"Orci dapibus\",\n    id: 10,\n    question_id: 3\n  }, {\n    choice: \"This is an answer to the question\",\n    id: 11,\n    question_id: 3\n  }, {\n    choice: \"Nisl convallis ut, primis nisl, sed mollis purus\",\n    id: 12,\n    question_id: 3\n  }],\n  error: false\n};\nexport default ((state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case QUESTION_GET_START:\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case QUESTION_GET_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        questions: payload\n      };\n\n    case QUESTION_GET_FAIL:\n      return { ...state,\n        isFetching: false,\n        error: payload\n      };\n\n    case ANSWER_GET_START:\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case ANSWER_GET_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        answers: payload\n      };\n\n    case ANSWER_GET_FAIL:\n      return { ...state,\n        isFetching: false,\n        error: payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/Braden/Documents/Lambda_FSW/Labs (1-8)/sorting-hat-fe/src/redux/reducers/reducer.js"],"names":["QUESTION_GET_START","QUESTION_GET_SUCCESS","QUESTION_GET_FAIL","ANSWER_GET_START","ANSWER_GET_SUCCESS","ANSWER_GET_FAIL","initialState","isFetching","questions","question","answers","choice","id","question_id","error","state","action","type","payload"],"mappings":"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","sourcesContent":["import {\n  QUESTION_GET_START,\n  QUESTION_GET_SUCCESS,\n  QUESTION_GET_FAIL,\n  ANSWER_GET_START,\n  ANSWER_GET_SUCCESS,\n  ANSWER_GET_FAIL\n} from \"../constants\";\n\nconst initialState = {\n  isFetching: false,\n  questions: [\n    { question: \"question1\" },\n    { question: \"question2\" },\n    { question: \"question3\" }\n  ],\n  answers: [\n    { choice: \"Nulla et pellentesque, facilisis pede\", id: 1, question_id: 1 },\n    { choice: \"This is an answer to the question\", id: 2, question_id: 1 },\n    { choice: \"Nonummy ante pulvinar\", id: 3, question_id: 1 },\n    { choice: \"Lectus leo\", id: 4, question_id: 1 },\n    { choice: \"This is an answer to the question\", id: 5, question_id: 2 },\n    { choice: \"Amet hendrerit amet, diam arcu et\", id: 6, question_id: 2 },\n    {\n      choice: \"Cras eleifend litora, pellentesque donec mus, volutpat libero\",\n      id: 7,\n      question_id: 2\n    },\n    { choice: \"Elit wisi, et senectus etiam\", id: 8, question_id: 2 },\n    { choice: \"Dolorem possimus, quis ante\", id: 9, question_id: 3 },\n    { choice: \"Orci dapibus\", id: 10, question_id: 3 },\n    { choice: \"This is an answer to the question\", id: 11, question_id: 3 },\n    {\n      choice: \"Nisl convallis ut, primis nisl, sed mollis purus\",\n      id: 12,\n      question_id: 3\n    }\n  ],\n  error: false\n};\n\nexport default (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case QUESTION_GET_START:\n      return { ...state, isFetching: true, error: false };\n    case QUESTION_GET_SUCCESS:\n      return { ...state, isFetching: false, questions: payload };\n    case QUESTION_GET_FAIL:\n      return { ...state, isFetching: false, error: payload };\n\n    case ANSWER_GET_START:\n      return { ...state, isFetching: true, error: false };\n    case ANSWER_GET_SUCCESS:\n      return { ...state, isFetching: false, answers: payload };\n    case ANSWER_GET_FAIL:\n      return { ...state, isFetching: false, error: payload };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}