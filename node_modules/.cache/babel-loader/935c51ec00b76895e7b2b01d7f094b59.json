{"ast":null,"code":"var _jsxFileName = \"/Users/Braden/Documents/Lambda_FSW/Labs (1-8)/sorting-hat-fe/src/components/Quiz.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/actions/getQuestions\";\nimport { getAnswers } from \"../redux/actions/getAnswers\";\nimport { setScores } from \"../redux/actions/setScores\";\nimport { Redirect } from \"react-router-dom\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Quiz(props) {\n  const {\n    getQuestions,\n    getAnswers,\n    setScores,\n    questions,\n    answers\n  } = props;\n  const [num, setNum] = useState(0);\n  const [currentScores, setCurrentScores] = useState({\n    fullstack: 0,\n    ios: 0,\n    android: 0,\n    ux: 0,\n    ds: 0\n  });\n  useEffect(() => {\n    getQuestions();\n    getAnswers();\n  }, []);\n\n  const onSubmit = evt => {\n    evt.preventDefault();\n  };\n\n  if (num === questions.length) {\n    setScores(currentScores);\n    return React.createElement(Redirect, {\n      to: \"/results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"quiz-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"Quiz\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, questions[num].question), React.createElement(\"ol\", {\n    className: \"list-decimal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, answers.map(answer => {\n    if (answer.question_id === questions[num].id) {\n      return React.createElement(\"li\", {\n        key: answer.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, answer.choice);\n    }\n  })), React.createElement(\"button\", {\n    onClick: () => setNum(num + 1),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Next\"), React.createElement(ProgressBar, {\n    progress: `${questions[num].id}/${questions.length}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    questions: state.questions,\n    answers: state.answers\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getQuestions,\n  getAnswers,\n  setScores\n})(Quiz);","map":{"version":3,"sources":["/Users/Braden/Documents/Lambda_FSW/Labs (1-8)/sorting-hat-fe/src/components/Quiz.js"],"names":["React","useState","useEffect","connect","getQuestions","getAnswers","setScores","Redirect","ProgressBar","Quiz","props","questions","answers","num","setNum","currentScores","setCurrentScores","fullstack","ios","android","ux","ds","onSubmit","evt","preventDefault","length","question","map","answer","question_id","id","choice","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,+BAA7B;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,QAAM;AAAEN,IAAAA,YAAF;AAAgBC,IAAAA,UAAhB;AAA4BC,IAAAA,SAA5B;AAAuCK,IAAAA,SAAvC;AAAkDC,IAAAA;AAAlD,MAA8DF,KAApE;AACA,QAAM,CAACG,GAAD,EAAMC,MAAN,IAAgBb,QAAQ,CAAC,CAAD,CAA9B;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC;AACjDgB,IAAAA,SAAS,EAAE,CADsC;AAEjDC,IAAAA,GAAG,EAAE,CAF4C;AAGjDC,IAAAA,OAAO,EAAE,CAHwC;AAIjDC,IAAAA,EAAE,EAAE,CAJ6C;AAKjDC,IAAAA,EAAE,EAAE;AAL6C,GAAD,CAAlD;AAQAnB,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,YAAY;AACZC,IAAAA,UAAU;AACX,GAHQ,EAGN,EAHM,CAAT;;AAKA,QAAMiB,QAAQ,GAAGC,GAAG,IAAI;AACtBA,IAAAA,GAAG,CAACC,cAAJ;AACD,GAFD;;AAIA,MAAIX,GAAG,KAAKF,SAAS,CAACc,MAAtB,EAA8B;AAC5BnB,IAAAA,SAAS,CAACS,aAAD,CAAT;AACA,WAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,SACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,SAAS,CAACE,GAAD,CAAT,CAAea,QAApB,CAFF,EAIE;AAAI,IAAA,SAAS,EAAC,cAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,OAAO,CAACe,GAAR,CAAYC,MAAM,IAAI;AACrB,QAAIA,MAAM,CAACC,WAAP,KAAuBlB,SAAS,CAACE,GAAD,CAAT,CAAeiB,EAA1C,EAA8C;AAC5C,aAAO;AAAI,QAAA,GAAG,EAAEF,MAAM,CAACE,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAqBF,MAAM,CAACG,MAA5B,CAAP;AACD;AACF,GAJA,CADH,CAJF,EAWE;AAAQ,IAAA,OAAO,EAAE,MAAMjB,MAAM,CAACD,GAAG,GAAG,CAAP,CAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,EAYE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAG,GAAEF,SAAS,CAACE,GAAD,CAAT,CAAeiB,EAAG,IAAGnB,SAAS,CAACc,MAAO,EAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,CADF;AAgBD;;AACD,MAAMO,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLtB,IAAAA,SAAS,EAAEsB,KAAK,CAACtB,SADZ;AAELC,IAAAA,OAAO,EAAEqB,KAAK,CAACrB;AAFV,GAAP;AAID,CALD;;AAOA,eAAeT,OAAO,CAAC6B,eAAD,EAAkB;AACtC5B,EAAAA,YADsC;AAEtCC,EAAAA,UAFsC;AAGtCC,EAAAA;AAHsC,CAAlB,CAAP,CAIZG,IAJY,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/actions/getQuestions\";\nimport { getAnswers } from \"../redux/actions/getAnswers\";\nimport { setScores } from \"../redux/actions/setScores\";\nimport { Redirect } from \"react-router-dom\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Quiz(props) {\n  const { getQuestions, getAnswers, setScores, questions, answers } = props;\n  const [num, setNum] = useState(0);\n  const [currentScores, setCurrentScores] = useState({\n    fullstack: 0,\n    ios: 0,\n    android: 0,\n    ux: 0,\n    ds: 0\n  });\n\n  useEffect(() => {\n    getQuestions();\n    getAnswers();\n  }, []);\n\n  const onSubmit = evt => {\n    evt.preventDefault();\n  };\n\n  if (num === questions.length) {\n    setScores(currentScores);\n    return <Redirect to=\"/results\" />;\n  }\n  return (\n    <div className=\"quiz-wrapper\">\n      <h1>Quiz</h1>\n      <h2>{questions[num].question}</h2>\n      {/* //todo change list style  */}\n      <ol className=\"list-decimal\">\n        {answers.map(answer => {\n          if (answer.question_id === questions[num].id) {\n            return <li key={answer.id}>{answer.choice}</li>;\n          }\n        })}\n      </ol>\n      <button onClick={() => setNum(num + 1)}>Next</button>\n      <ProgressBar progress={`${questions[num].id}/${questions.length}`} />\n    </div>\n  );\n}\nconst mapStateToProps = state => {\n  return {\n    questions: state.questions,\n    answers: state.answers\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getQuestions,\n  getAnswers,\n  setScores\n})(Quiz);\n"]},"metadata":{},"sourceType":"module"}