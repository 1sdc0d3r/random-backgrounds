{"ast":null,"code":"import { QUESTION_GET_START, QUESTION_GET_SUCCESS, QUESTION_GET_FAIL } from \"../constants\";\nconst initialState = {\n  isFetching: false,\n  questions: [\"question1\", \"question2\", \"question3\"],\n  error: false\n};\nexport default ((state = initialState, action) => {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case QUESTION_GET_START:\n      return { ...state,\n        isFetching: true,\n        error: false\n      };\n\n    case QUESTION_GET_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        questions: payload\n      };\n\n    case QUESTION_GET_FAIL:\n      return { ...state,\n        isFetching: false,\n        error: payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/jan/Documents/lambda/labs22/sorting-hat-fe/src/redux/reducers/reducer.js"],"names":["QUESTION_GET_START","QUESTION_GET_SUCCESS","QUESTION_GET_FAIL","initialState","isFetching","questions","error","state","action","type","payload"],"mappings":"AAAA,SACEA,kBADF,EAEEC,oBAFF,EAGEC,iBAHF,QAIO,cAJP;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,SAAS,EAAE,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,CAFQ;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,gBAAe,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAC/C,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AACA,UAAQC,IAAR;AACE,SAAKT,kBAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AAAYH,QAAAA,UAAU,EAAE,IAAxB;AAA8BE,QAAAA,KAAK,EAAE;AAArC,OAAP;;AACF,SAAKL,oBAAL;AACE,aAAO,EAAE,GAAGM,KAAL;AAAYH,QAAAA,UAAU,EAAE,KAAxB;AAA+BC,QAAAA,SAAS,EAAEK;AAA1C,OAAP;;AACF,SAAKR,iBAAL;AACE,aAAO,EAAE,GAAGK,KAAL;AAAYH,QAAAA,UAAU,EAAE,KAAxB;AAA+BE,QAAAA,KAAK,EAAEI;AAAtC,OAAP;;AAEF;AACE,aAAOH,KAAP;AATJ;AAWD,CAbD","sourcesContent":["import {\n  QUESTION_GET_START,\n  QUESTION_GET_SUCCESS,\n  QUESTION_GET_FAIL\n} from \"../constants\";\n\nconst initialState = {\n  isFetching: false,\n  questions: [\"question1\", \"question2\", \"question3\"],\n  error: false\n};\n\nexport default (state = initialState, action) => {\n  const { type, payload } = action;\n  switch (type) {\n    case QUESTION_GET_START:\n      return { ...state, isFetching: true, error: false };\n    case QUESTION_GET_SUCCESS:\n      return { ...state, isFetching: false, questions: payload };\n    case QUESTION_GET_FAIL:\n      return { ...state, isFetching: false, error: payload };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}