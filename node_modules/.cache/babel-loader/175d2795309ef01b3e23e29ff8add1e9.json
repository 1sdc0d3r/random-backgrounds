{"ast":null,"code":"var _jsxFileName = \"/Users/Braden/Documents/Lambda_FSW/Labs (1-8)/sorting-hat-fe/src/components/Quiz.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/actions/getQuestions\";\nimport { getAnswers } from \"../redux/actions/getAnswers\";\nimport { setScores } from \"../redux/actions/setScores\";\nimport { getPoints } from \"../redux/actions/getPoints\";\nimport { Redirect } from \"react-router-dom\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Quiz(props) {\n  const {\n    getQuestions,\n    getAnswers,\n    setScores,\n    getPoints,\n    questions,\n    answers,\n    points\n  } = props;\n  const [num, setNum] = useState(0);\n  const [choiceScores, setChoiceScores] = useState([]);\n  const [currentAnswers, setCurrentAnswers] = useState([]);\n  const [currentScores, setCurrentScores] = useState({\n    fullstack: 0,\n    ios: 0,\n    android: 0,\n    ux: 0,\n    ds: 0\n  });\n  useEffect(() => {\n    getQuestions();\n    getAnswers();\n    getPoints();\n  }, []);\n  useEffect(() => {\n    setCurrentAnswers(answers.filter(answer => answer.question_id === questions[num].id));\n    console.log({\n      currentAnswers\n    });\n  }, [num]); // fullstack: \"1.00\"\n  // iOS: \"2.00\"\n  // andriod: \"3.00\"\n  // UX: \"4.00\"\n  // DS: \"0.00\"\n  // id: 1\n  // answer_id: 1\n\n  if (num === questions.length) {\n    setScores(currentScores);\n    return React.createElement(Redirect, {\n      to: \"/results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"quiz-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, \"Quiz\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, questions[num].question), React.createElement(\"div\", {\n    className: \"flex flex-col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, currentAnswers.map(answer => React.createElement(\"button\", {\n    key: answer.id,\n    onClick: () => {\n      setNum(num + 1);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, answer.choice))), React.createElement(ProgressBar, {\n    progress: `${questions[num].id}/${questions.length}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    questions: state.questions,\n    answers: state.answers,\n    points: state.points\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getQuestions,\n  getAnswers,\n  setScores,\n  getPoints\n})(Quiz);","map":{"version":3,"sources":["/Users/Braden/Documents/Lambda_FSW/Labs (1-8)/sorting-hat-fe/src/components/Quiz.js"],"names":["React","useState","useEffect","connect","getQuestions","getAnswers","setScores","getPoints","Redirect","ProgressBar","Quiz","props","questions","answers","points","num","setNum","choiceScores","setChoiceScores","currentAnswers","setCurrentAnswers","currentScores","setCurrentScores","fullstack","ios","android","ux","ds","filter","answer","question_id","id","console","log","length","question","map","choice","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/actions/getQuestions\";\nimport { getAnswers } from \"../redux/actions/getAnswers\";\nimport { setScores } from \"../redux/actions/setScores\";\nimport { getPoints } from \"../redux/actions/getPoints\";\nimport { Redirect } from \"react-router-dom\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Quiz(props) {\n  const {\n    getQuestions,\n    getAnswers,\n    setScores,\n    getPoints,\n    questions,\n    answers,\n    points\n  } = props;\n\n  const [num, setNum] = useState(0);\n  const [choiceScores, setChoiceScores] = useState([]);\n  const [currentAnswers, setCurrentAnswers] = useState([]);\n  const [currentScores, setCurrentScores] = useState({\n    fullstack: 0,\n    ios: 0,\n    android: 0,\n    ux: 0,\n    ds: 0\n  });\n\n  useEffect(() => {\n    getQuestions();\n    getAnswers();\n    getPoints();\n  }, []);\n\n  useEffect(() => {\n    setCurrentAnswers(\n      answers.filter(answer => answer.question_id === questions[num].id)\n    );\n    console.log({ currentAnswers });\n  }, [num]);\n\n  // fullstack: \"1.00\"\n  // iOS: \"2.00\"\n  // andriod: \"3.00\"\n  // UX: \"4.00\"\n  // DS: \"0.00\"\n  // id: 1\n  // answer_id: 1\n\n  if (num === questions.length) {\n    setScores(currentScores);\n    return <Redirect to=\"/results\" />;\n  }\n  return (\n    <div className=\"quiz-wrapper\">\n      <h1>Quiz</h1>\n      <h2>{questions[num].question}</h2>\n\n      <div className=\"flex flex-col\">\n        {currentAnswers.map(answer => (\n          <button\n            key={answer.id}\n            onClick={() => {\n              setNum(num + 1);\n            }}\n          >\n            {answer.choice}\n          </button>\n        ))}\n        {/* {answers.map(answer => {\n          // setChoiceScores(\n          // points.filter(point => answer.question_id === point.question_id)\n          // );\n          if (answer.question_id === questions[num].id) {\n            return (\n              <button\n                key={answer.id}\n                onClick={() => {\n                  setNum(num + 1);\n                }}\n              >\n                {answer.choice}\n              </button>\n            );\n          }\n        })} */}\n      </div>\n      <ProgressBar progress={`${questions[num].id}/${questions.length}`} />\n    </div>\n  );\n}\nconst mapStateToProps = state => {\n  return {\n    questions: state.questions,\n    answers: state.answers,\n    points: state.points\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getQuestions,\n  getAnswers,\n  setScores,\n  getPoints\n})(Quiz);\n"]},"metadata":{},"sourceType":"module"}