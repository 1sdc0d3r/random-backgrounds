{"ast":null,"code":"var _jsxFileName = \"/Users/Braden/Documents/Lambda_FSW/Labs (1-8)/sorting-hat-fe/src/components/Quiz.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/actions/getQuestions\";\nimport { getAnswers } from \"../redux/actions/getAnswers\";\nimport { setScores } from \"../redux/actions/setScores\";\nimport { getTracks } from \"../redux/actions/getTracks\";\nimport { Redirect } from \"react-router-dom\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Quiz(props) {\n  const {\n    getQuestions,\n    getAnswers,\n    setScores,\n    getTracks,\n    questions,\n    answers,\n    Tracks\n  } = props;\n  const [num, setNum] = useState(0);\n  const [currentAnswers, setCurrentAnswers] = useState([]);\n  const [currentScores, setCurrentScores] = useState({\n    fullstack: 0,\n    ios: 0,\n    android: 0,\n    ux: 0,\n    ds: 0\n  });\n  useEffect(() => {\n    getQuestions();\n    getAnswers();\n    getTracks();\n  }, []); // useEffect(() => {\n  //   setCurrentAnswers(\n  //     answers.filter(answer => answer.question_id === questions[num].id)\n  //   );\n  // }, [num]);\n  // fullstack: \"1.00\"\n  // iOS: \"2.00\"\n  // android: \"3.00\"\n  // UX: \"4.00\"\n  // DS: \"0.00\"\n  // id: 1\n  // answer_id: 1\n\n  if (num === questions.length) {\n    setScores(currentScores);\n    return React.createElement(Redirect, {\n      to: \"/results\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(\"div\", {\n    className: \"quiz-wrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"Quiz\"), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, questions[num].question), React.createElement(\"div\", {\n    className: \"flex flex-col\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, answers.map(answer => {\n    if (answer.question_id === questions[num].id) {\n      return React.createElement(\"button\", {\n        key: answer.id,\n        onClick: () => {\n          setNum(num + 1);\n          console.log(answer.id);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, answer.choice);\n    }\n  })), React.createElement(ProgressBar, {\n    progress: `${questions[num].id}/${questions.length}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }));\n}\n\nconst mapStateToProps = state => {\n  return {\n    questions: state.questions,\n    answers: state.answers,\n    Tracks: state.Tracks\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getQuestions,\n  getAnswers,\n  setScores,\n  getTracks\n})(Quiz);","map":{"version":3,"sources":["/Users/Braden/Documents/Lambda_FSW/Labs (1-8)/sorting-hat-fe/src/components/Quiz.js"],"names":["React","useState","useEffect","connect","getQuestions","getAnswers","setScores","getTracks","Redirect","ProgressBar","Quiz","props","questions","answers","Tracks","num","setNum","currentAnswers","setCurrentAnswers","currentScores","setCurrentScores","fullstack","ios","android","ux","ds","length","question","map","answer","question_id","id","console","log","choice","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,+BAA7B;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,SAAT,QAA0B,4BAA1B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACnB,QAAM;AACJP,IAAAA,YADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,SAJI;AAKJK,IAAAA,SALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA;AAPI,MAQFH,KARJ;AAUA,QAAM,CAACI,GAAD,EAAMC,MAAN,IAAgBf,QAAQ,CAAC,CAAD,CAA9B;AACA,QAAM,CAACgB,cAAD,EAAiBC,iBAAjB,IAAsCjB,QAAQ,CAAC,EAAD,CAApD;AAEA,QAAM,CAACkB,aAAD,EAAgBC,gBAAhB,IAAoCnB,QAAQ,CAAC;AACjDoB,IAAAA,SAAS,EAAE,CADsC;AAEjDC,IAAAA,GAAG,EAAE,CAF4C;AAGjDC,IAAAA,OAAO,EAAE,CAHwC;AAIjDC,IAAAA,EAAE,EAAE,CAJ6C;AAKjDC,IAAAA,EAAE,EAAE;AAL6C,GAAD,CAAlD;AAQAvB,EAAAA,SAAS,CAAC,MAAM;AACdE,IAAAA,YAAY;AACZC,IAAAA,UAAU;AACVE,IAAAA,SAAS;AACV,GAJQ,EAIN,EAJM,CAAT,CAtBmB,CA4BnB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIQ,GAAG,KAAKH,SAAS,CAACc,MAAtB,EAA8B;AAC5BpB,IAAAA,SAAS,CAACa,aAAD,CAAT;AACA,WAAO,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,UAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,SACE;AAAK,IAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKP,SAAS,CAACG,GAAD,CAAT,CAAeY,QAApB,CAFF,EAIE;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,OAAO,CAACe,GAAR,CAAYC,MAAM,IAAI;AACrB,QAAIA,MAAM,CAACC,WAAP,KAAuBlB,SAAS,CAACG,GAAD,CAAT,CAAegB,EAA1C,EAA8C;AAC5C,aACE;AACE,QAAA,GAAG,EAAEF,MAAM,CAACE,EADd;AAEE,QAAA,OAAO,EAAE,MAAM;AACbf,UAAAA,MAAM,CAACD,GAAG,GAAG,CAAP,CAAN;AACAiB,UAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAM,CAACE,EAAnB;AACD,SALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAOGF,MAAM,CAACK,MAPV,CADF;AAWD;AACF,GAdA,CADH,CAJF,EAqBE,oBAAC,WAAD;AAAa,IAAA,QAAQ,EAAG,GAAEtB,SAAS,CAACG,GAAD,CAAT,CAAegB,EAAG,IAAGnB,SAAS,CAACc,MAAO,EAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,CADF;AAyBD;;AACD,MAAMS,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AACLxB,IAAAA,SAAS,EAAEwB,KAAK,CAACxB,SADZ;AAELC,IAAAA,OAAO,EAAEuB,KAAK,CAACvB,OAFV;AAGLC,IAAAA,MAAM,EAAEsB,KAAK,CAACtB;AAHT,GAAP;AAKD,CAND;;AAQA,eAAeX,OAAO,CAACgC,eAAD,EAAkB;AACtC/B,EAAAA,YADsC;AAEtCC,EAAAA,UAFsC;AAGtCC,EAAAA,SAHsC;AAItCC,EAAAA;AAJsC,CAAlB,CAAP,CAKZG,IALY,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { getQuestions } from \"../redux/actions/getQuestions\";\nimport { getAnswers } from \"../redux/actions/getAnswers\";\nimport { setScores } from \"../redux/actions/setScores\";\nimport { getTracks } from \"../redux/actions/getTracks\";\nimport { Redirect } from \"react-router-dom\";\nimport ProgressBar from \"./ProgressBar\";\n\nfunction Quiz(props) {\n  const {\n    getQuestions,\n    getAnswers,\n    setScores,\n    getTracks,\n    questions,\n    answers,\n    Tracks\n  } = props;\n\n  const [num, setNum] = useState(0);\n  const [currentAnswers, setCurrentAnswers] = useState([]);\n\n  const [currentScores, setCurrentScores] = useState({\n    fullstack: 0,\n    ios: 0,\n    android: 0,\n    ux: 0,\n    ds: 0\n  });\n\n  useEffect(() => {\n    getQuestions();\n    getAnswers();\n    getTracks();\n  }, []);\n\n  // useEffect(() => {\n  //   setCurrentAnswers(\n  //     answers.filter(answer => answer.question_id === questions[num].id)\n  //   );\n  // }, [num]);\n\n  // fullstack: \"1.00\"\n  // iOS: \"2.00\"\n  // android: \"3.00\"\n  // UX: \"4.00\"\n  // DS: \"0.00\"\n  // id: 1\n  // answer_id: 1\n\n  if (num === questions.length) {\n    setScores(currentScores);\n    return <Redirect to=\"/results\" />;\n  }\n  return (\n    <div className=\"quiz-wrapper\">\n      <h1>Quiz</h1>\n      <h2>{questions[num].question}</h2>\n\n      <div className=\"flex flex-col\">\n        {answers.map(answer => {\n          if (answer.question_id === questions[num].id) {\n            return (\n              <button\n                key={answer.id}\n                onClick={() => {\n                  setNum(num + 1);\n                  console.log(answer.id);\n                }}\n              >\n                {answer.choice}\n              </button>\n            );\n          }\n        })}\n      </div>\n      <ProgressBar progress={`${questions[num].id}/${questions.length}`} />\n    </div>\n  );\n}\nconst mapStateToProps = state => {\n  return {\n    questions: state.questions,\n    answers: state.answers,\n    Tracks: state.Tracks\n  };\n};\n\nexport default connect(mapStateToProps, {\n  getQuestions,\n  getAnswers,\n  setScores,\n  getTracks\n})(Quiz);\n"]},"metadata":{},"sourceType":"module"}